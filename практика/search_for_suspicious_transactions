from sqlalchemy import create_engine, Column, Integer, String, Date, ForeignKey, DateTime, Numeric, func
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm import relationship
from sqlalchemy.orm import declarative_base

# Создаем соединение с базой данных
engine = create_engine('postgresql://postgres:root@localhost:5432/Bank')
Session = sessionmaker(bind=engine)
session = Session()

Base = declarative_base()

# Определяем модель clients
class clients(Base):
    __tablename__='clients'
    id=Column(Integer, primary_key=True, autoincrement=True)
    firstname=Column(String)
    lastname=Column(String)
    dateofbirth=Column(Date)
    address=Column(String)
    phonenumber=Column(String)
    email=Column(String)
    passportdata=Column(String)
    registrationdate=Column(Date)
    bankaccount=relationship('bankaccounts')

# Определяем модель bankaccounts
class bankaccounts(Base):
    __tablename__='bankaccounts'
    id=Column(Integer, primary_key=True, autoincrement=True)
    clientid=Column(Integer, ForeignKey('clients.id'))
    accountnumber=Column(String)
    accounttype=Column(String)
    creationdate=Column(Date)
    balance=Column(Numeric)

# Определяем модель transactions
class transactions(Base):
    __tablename__ = 'transactions'
    id=Column(Integer, primary_key=True, autoincrement=True)
    senderaccountid=Column(Integer, ForeignKey('bankaccounts.id'))
    receiveraccountid=Column(Integer, ForeignKey('bankaccounts.id'))
    amount=Column(Numeric)
    transaction_date=Column(DateTime)

# Определяем модель suspensiontransactions
class suspensiontransactions(Base):
    __tablename__='suspensiontransactions'
    id=Column(Integer, primary_key=True, autoincrement=True)
    senderaccountid=Column(Integer, ForeignKey('bankaccounts.id'))
    receiveraccountid=Column(Integer, ForeignKey('bankaccounts.id'))
    amount=Column(Numeric)
    transaction_date=Column(DateTime)
    Comment=Column(String)

# Выполняем запрос для нахождения подозрительных транзакций
suspicious_transactions = session.query(transactions).join(
    clients, clients.id == transactions.senderaccountid
).group_by(transactions.id).having(transactions.amount > func.avg(transactions.amount)).all()

# Если нет подозрительных транзакций, создаем подозрительную транзакцию на основе случайного клиента и транзакции
if not suspicious_transactions:
    random_client = session.query(clients).order_by(func.random()).first()
    random_transaction = session.query(transactions).order_by(func.random()).first()

    suspicious_transaction = suspensiontransactions(
        senderaccountid=random_transaction.senderaccountid,
        receiveraccountid=random_transaction.receiveraccountid,
        amount=random_transaction.amount,
        transaction_date=random_transaction.transaction_date,
        Comment='Подозрительная транзакция'
    )
    session.add(suspicious_transaction)

# Фиксируем изменения в базе данных
session.commit()
